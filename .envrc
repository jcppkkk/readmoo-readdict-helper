#!/bin/bash
#
# Install https://direnv.net/ to load this file automatically
#

# Hook pre-commit
if [[ -f .pre-commit-config.yaml ]] \
    && command -v pre-commit &>/dev/null \
    && ! grep -q pre-commit .git/hooks/pre-commit; then
    echo "direnv: initializing pre-commit"
    pre-commit install
fi

if [[ -f init-repo ]]; then
    ./init-repo
fi

# Config git .env sanitize
if [[ -f .env ]]; then
    chmod -c 0600 .env
    # Load .env file
    dotenv .env

    # Configure git filter to store and restore env values
    # shellcheck disable=SC2016
    clean_filter='
sed -e "/^[^#]/s/=.*/=/" | {
    while IFS= read -r line; do
        if [[ $line =~ ^([^#][^=]+)= ]]; then
            key="${BASH_REMATCH[1]}"
            val=$(grep "^$key=" .env | cut -d= -f2-)
            echo "$key=$val" >> .env-store.tmp
        fi
        echo "$line"
    done
    if [ -f .env-store.tmp ]; then
        awk -F= "!seen[\$1]++{arr[++n]=\$0} END{for(i=n;i>0;i--)print arr[i]}" .env-store.tmp > .env-store
        rm -f .env-store.tmp
        chmod 0600 .env-store
    fi
}'

    # shellcheck disable=SC2016
    smudge_filter='
tac | while IFS= read -r line; do
    if [[ $line =~ ^([^#][^=]+)= ]]; then
        key="${BASH_REMATCH[1]}"
        val=$(awk -F= -v k="$key" "$1==k{print \$2; exit}" .env-store 2>/dev/null)
        if [ -n "$val" ]; then
            echo "$key=$val"
        else
            echo "$line"
        fi
    else
        echo "$line"
    fi
done'

    if [[ $(git config --get filter.sanitize-env.clean) != "bash -c '$clean_filter'" ]]; then
        echo "direnv: configuring git filter for .env"
        git config filter.sanitize-env.clean "bash -c '$clean_filter'"
    fi
    if [[ $(git config --get filter.sanitize-env.smudge) != "bash -c '$smudge_filter'" ]]; then
        echo "direnv: configuring git filter for .env"
        git config filter.sanitize-env.smudge "bash -c '$smudge_filter'"
    fi

    if ! grep "^/.env" .gitattributes &>/dev/null; then
        echo "/.env filter=sanitize-env" >>.gitattributes
    fi

    # Add .env-store to .gitignore if not already present
    if ! grep "^/.env-store$" .gitignore &>/dev/null; then
        echo "/.env-store" >>.gitignore
    fi
    if grep -q "^/.env$" .gitignore; then
        # remove .env from .gitignore
        sed -i '/^\/.env$/d' .gitignore
    fi
fi

# Load python environment
if [[ -f uv.lock ]] && command -v mise &>/dev/null; then
    # Setup mise to load uv venv
    mise settings set python.uv_venv_auto true
elif [[ -f pyproject.toml ]] && command -v poetry &>/dev/null && grep -q poetry pyproject.toml; then
    log_status "loading Poetry"

    if ! direnv_load poetry run direnv dump; then
        log_error "failed to enter Poetry env, do you need 'poetry install'?"
        return 2
    fi
elif [[ -f Pipfile ]]; then
    echo "direnv: loading Pipenv"
    layout pipenv
fi
